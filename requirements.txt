Вот задача:
Необходимо создать микро-сервис, по сути proxy между клинтами и реальной базой данных. Взаимодействие предполагается через REST API.

Во вложении, вариант технического задания: Hotel Catalog API V1.0.pdf
Примечания: 
Изначально дезайн предполагет в качестве СУБД - Mongo DB 
Исходники  предплагалось хранить на Git.Hub
Разворачивание на продакшен через Jenkins
---------------------
В общем весь раздел "Servers & Deployment" посвящен вышеупомянутым деталям технического дизайна, эко-системы,  инфраструктуры и организациии рабочего процесса.

Де факто - ты можешь принимать решение на свое усмотрение, что и как. Выбирай любую СУБД, процесс разработки, и продакшена у тебя как бы нет.
Главное - это работающий микросервис "экранирующий" реальную БД от клиентов через REST API.

Предлагаю следующие роли * :
Я буду твоим "Product" - моя отвественность предоставить требования и объяснять детали в случае затруднения и в итоге приемка результата.
Ты - отдел разработки

* - предполагаемый язык разработки Java + framework Spring*
* - рекомендуется по возможности покрывать написанный код unit-tests
* - работать будем по SCRUM - выбирай удобный для тебя интервал: 1w, 2w, 3w
* - любые вопросы должны обсуждаться путем голосовых переговоров и переписки на английском языке (т.к. у нас нет сиситемы управления задачами или можно исопльзовать что-то) , 
* - в нашем случае для видео сессий удобно использовать сервис appear.in  - есть уже готовая переговорная комната  
(но оможно и Skype)

1. Начать предлогаю с изучения и обсуждения требований. 
2. Затем потркбуется разработки технического дизайна: high-level  (design-gramma +  explanations) и затем последовательно перейти к более глубоким дизайнам. Этот шаг в последствии поможет нам построить оперативнй план, включающий эпики, истории, задачи и под-задачи, что в свою очередь позволит нам оценить требуемые ресурсы (время и знания)
3. Затем разработка POC (Proof Of Concept)
4. Принятие рещения "GO / NO GO". Т.е. можем продолжать или надо пересматривать технический дизайн.
5. Создание MVP (Minimal Valuable Product)
6. Принятие рещения "GO / NO GO"
7. Разработка первой версии 
8. QA (Quality Assurance) - проверка версии на соотвествие всем требованиям (как минимум функциональное тестирование). "GO / NO GO"
9. Первый релиз.
